generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

enum Role {
  PATIENT
  NURSE
  DOCTOR
  RECEPTIONIST
  ADMIN
}

enum BloodType {
  A_POSITIVE
  B_POSITIVE
  AB_POSITIVE
  O_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  AB_NEGATIVE
  O_NEGATIVE
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  MISSED
}

model User {
  id            String   @id @unique @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  password      String
  role          Role
  contactNumber String?
  dob           DateTime

  patient             Patient?
  doctor              Doctor?
  nurse               Nurse?
  admin               Admin?
  receptionist        Receptionist?
  emailVerified       DateTime?
  verificationTokens  VerificationToken[]
  passwordSetupTokens PasswordSetupToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id               String            @id @default(uuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id])
  gender           Gender
  bloodType        BloodType
  insuranceInfo    String?
  address          String
  emergencyContact EmergencyContact?
  medicalRecords   MedicalRecords[]
  appointments     Appointments[]
}

model Admin {
  id             String  @id @default(uuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
  department     String
  officeLocation String?
  assignedTasks  String?
}

model Nurse {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  department    String
  shift         String
  certification String[]
}

model Doctor {
  id                String           @id @default(uuid())
  userId            String           @unique
  user              User             @relation(fields: [userId], references: [id])
  specialty         String
  licenseNumber     String
  qualifications    String
  yearsOfExperience Int
  department        String
  consultations     MedicalRecords[]
  appointments      Appointments[]
}

model Appointments {
  id              String            @id @default(uuid())
  Patient         Patient?          @relation(fields: [patientId], references: [id])
  patientId       String?
  appointmentDate DateTime
  status          AppointmentStatus
  reason          String?
  prescription    String
  doctorId        String
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
}

model MedicalRecords {
  id         String   @id @default(uuid())
  recordDate DateTime @default(now())
  diagnosis  String
  treatment  String
  patientId  String?
  doctorId   String
  Patient    Patient? @relation(fields: [patientId], references: [id])
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
}

model EmergencyContact {
  id            String  @id @default(uuid())
  Patient       Patient @relation(fields: [patientId], references: [id])
  patientId     String  @unique
  firstName     String
  lastName      String
  contactNumber String
  address       String
}

model Receptionist {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model PasswordSetupToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// model Permission {
//   id       String   @id @default(email())
//   userId   String
//   user     User     @relation(fields: [userId], references: [id])
//   actions  String[]
//   resource String
// }
